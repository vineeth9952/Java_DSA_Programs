class Node 
{
    int data;
    Node prev;
    Node next;
    Node(int data)
    {
        this.data = data ;
        this.prev = null ;
        this.next = null ;
    }
}
public class CircularDoublyLinkedList
{
    Node Head ;
    Node Tail ;
    
    CircularDoublyLinkedList()
    {
        this.Head = null;
        this.Tail = null;
    }
    public void Insert_at_End(int data)
    {
        Node newnode = new Node(data);
        if(this.Head==null && this.Tail==null)
        {
            this.Head = newnode ;
            this.Tail = newnode ;
        }
        else 
        {
            newnode.prev = this.Tail ;
            this.Tail.next = newnode ;
            this.Tail = newnode ;
            
            this.Head.prev = this.Tail;
            this.Tail.next = this.Head;
        }
    }
    public void Insert_at_Begin(int data)
    {
        Node newnode = new Node(data);
        if (this.Head == null && this.Tail == null)
        {
            this.Head = newnode ;
            this.Tail = newnode ;
        }
        else 
        {
            newnode.next = this.Head ;
            this.Head.prev = newnode;
            this.Head = newnode;
            
            this.Head.prev = this.Tail;
            this.Tail.next = this.Head;
        }
    }
    public void Insert_at_Position(int data, int pos)
    {
        Node newnode = new Node(data);
        if (pos==1)
        {
            newnode.next = this.Head;
            this.Head.prev = newnode;
            this.Head = newnode;
            
            this.Head.prev = this.Tail;
            this.Tail.next = this.Head;
        }
        else
        {
            Node temp = this.Head ;
            while(pos-2 > 0 && temp.next!=null)
            {
                temp = temp.next ;
                pos--;
            }
            newnode.prev = temp;
            newnode.next = temp.next;
            if(temp.next != null)
                temp.next.prev = newnode ;
            temp.next = newnode ;
            
        }
    }
    public void Delete_at_End()
    {
        if (this.Head == null && this.Tail==null)
        {
            System.out.println("List is Empty");
        }
        else if (this.Head.next == null)
        {
            this.Head = null;
            this.Tail = null;
        }
        else 
        {
            this.Tail = this.Tail.prev;
            this.Tail.next = this.Head;
            this.Head.prev = this.Tail;
        }
    }
    public void Delete_at_Begin()
    {
        if (this.Head == null && this.Tail==null)
        {
            System.out.println("List is Empty");
        }
        else if (this.Head.next == null)
        {
            this.Head = null;
            this.Tail = null;
        }
        else 
        {
            this.Head = this.Head.next ;
            this.Head.prev = this.Tail;
            this.Tail.next = this.Head;
        }
    }
    public void Delete_at_Position(int pos)
    {
        if (this.Head == null && this.Tail==null)
        {
            System.out.println("List is Empty");
        }
        else if (pos==1)
        {
            this.Head = this.Head.next ;
            this.Head.prev = this.Tail;
            this.Tail.next = this.Head;
        }
        else 
        {
            Node temp = this.Head ;
            while(pos-2 > 0 && temp.next!=null)
            {
                temp = temp.next ;
                pos--;
            }
            temp.next = temp.next.next;
            temp.next.prev = temp;
        }
    }
    public void Display()
    {
        Node temp = this.Head ;
        System.out.println(this.Head+" "+this.Tail);
        while(temp.next != this.Head)
        {
            System.out.println(temp.prev +" "+temp+"  "+temp.data+" "+temp.next);
            temp = temp.next ;
        }
        System.out.println(temp.prev +" "+temp+"  "+temp.data+" "+temp.next);
    }
	public static void main(String[] args) 
	{
		CircularDoublyLinkedList dll = new CircularDoublyLinkedList();
		
		dll.Insert_at_End(1);
		dll.Insert_at_End(2);
		dll.Insert_at_End(3);
		dll.Insert_at_End(4);
		
		dll.Delete_at_Begin();
		dll.Display();
		
		
	}
}
